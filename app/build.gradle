buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.roberterrera.fastlanetest"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 3
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.android.support:appcompat-v7:25.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
}

def readVersion() {
    def versionFile = file('version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    // In case the file is missing
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['major']) version['build'] = "0"
    return version
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}"
}

def readBuildCode() {
    def version = readVersion()
    def build = version['build'] as int
    return build
}

def incrementBuildNumber() {
    def versionFile = file('version.properties')
    def version = readVersion()

    def build = version['build'] as int
    build++

    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    println "Build code has been updated to " + build
    return build
}

def incrementVersionNumber(def type="minor"){
    def versionFile = file('version.properties')
    def version = readVersion()

    def major = version['major'] as int
    def minor = version['minor'] as int

    if (type == 'major') {
        major++
        minor = 0
    } else if (type == 'minor') {
        minor++
    }

    version['major'] = major.toString()
    version['minor'] = minor.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    println "Version name has been updated to " + major + "." + minor
    return major + "." + minor
}

task doMajorVersionIncrement << {
    println "Incrementing major version..."
    incrementVersionNumber('major')
}

task doMinorVersionIncrement << {
    println "Incrementing minor version..."
    incrementVersionNumber('minor')
}

task doBuildNumberIncrement << {
    println "Incrementing build number..."
    incrementBuildNumber()
}